export const MeasureExecutionTime = (
  target: any,
  // це прототип класу, до якого належить метод,
  // в нашому пррикладі це: getUsers, getUserId, getMe, updateMe, deleteMe, uploadAvatar, deleteAvatar
  propertyKey: string,
  // ім'я методу, на якому висить наш декоратор, в нас це getUsers
  descriptor: PropertyDescriptor,
  // цей об'єкт містить інформацію про метод, зокрема доступ до його значення (реальної функції)
  // це вся функція getUsers, яка реалізує конкретний метод
): PropertyDescriptor => {
  const originalMethod = descriptor.value;
  // Тут зберігається оригінальний метод (функція),
  // до якого застосовується декоратор, для того щоб його можна було викликати пізніше.
  descriptor.value = async function (...args: any[]): Promise<any> {
    const start = performance.now();
    // вимірює час в мілісекундах з високою точністю
    // performance — це вбудований об'єкт,
    // який надає різні методи і властивості для вимірювання продуктивності веб-сторінки або програми.
    // Зокрема, він дозволяє отримувати інформацію про час завантаження, а також інші характеристики, пов'язані з продуктивністю.
    //now() — це метод об'єкта performance, який повертає кількість мілісекунд,
    // що минули з моменту початку завантаження поточного документа (як правило, з моменту відкриття сторінки).
    // Значення повертається у вигляді числа з високою точністю, наприклад 250.345678 (мілісекунд).
    try {
      return originalMethod.apply(this, args);
      // Після цього викликається оригінальний метод за допомогою originalMethod.apply(this, args).
      // Функція apply дозволяє викликати метод із збереженням контексту this та передати всі аргументи args.
    } finally {
      const end = performance.now();
      // Коли оригінальний метод завершить виконання (успішно або через помилку), виконуються команди у блоці finally.
      // Тут вимірюється кінець виконання const end = performance.now()
      console.log(
        `Execution time of ${propertyKey}: ${(end - start).toFixed(2)} ms`,
        //Після цього у консоль виводиться час виконання методу у мілісекундах з двома знаками після коми.
        // toFixed в js використовується для форматування чисел з фіксованою кількістю знаків після коми.
        // У цьому випадку, аргумент 2 вказує, що потрібно залишити два знаки після десяткової коми
      );
    }
  };
  //  декоратор змінює метод, заміняючи його новою функцією.
  //  Ця функція буде виконувати оригінальний метод, а також вимірювати час його виконання.

  return descriptor;
  // Після модифікації методу функція повертає змінений дескриптор.
  // Це необхідно для того, щоб TypeScript знав, що метод був змінений і буде виконувати нову логіку.
};
